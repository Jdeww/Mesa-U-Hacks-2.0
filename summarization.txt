Introduction to Tree Data Structure

Tree data structure is a hierarchical model used to organize data based on parent-child relationships. Common real-world examples include folder systems in operating systems and tag structures in HTML or XML documents. The highest node is called the root, which branches out into child nodes recursively.

Basic Terminologies in Tree Data Structure:

- Parent Node: A node directly above another node, e.g., B is the parent of D and E.
- Child Node: A node directly below another node, e.g., D and E are children of B.
- Root Node: The topmost node without a parent; every non-empty tree has exactly one root node, such as node A.
- Leaf Node: Nodes with no children; examples are I, J, K, F, G, and H.
- Ancestor: Any node on the path from the root to a given node; for instance, A and B are ancestors of E.
- Descendant: A node that has an ancestor; if y is ancestor of x, then x is a descendant of y.
- Sibling: Nodes sharing the same parent, such as D and E.
- Level: The number of edges from the root to a node; root is level 0.
- Internal Node: A node with at least one child.
- Neighbor: Parent or child nodes related directly to a node.
- Subtree: A node along with all its descendants.

Why Tree is Considered a Non-Linear Data Structure?

Trees are non-linear because data is organized on multiple levels rather than in a sequential or linear order. This hierarchical arrangement allows for structuring data efficiently in many scenarios.

Representation of Tree Data Structure:

A tree is represented by a root node connected to zero or more subtrees (T1, T2, ..., Tk), where each subtree has its own root. The subtree of a node X comprises all nodes that descend from X.